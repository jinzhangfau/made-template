pipeline trainstops {

    TrainstopsExtractor
        -> TrainstopsTextFileInterpreter
        -> TrainstopsCSVInterpreter
        -> TrainstopsTableInterpreter
        -> TrainstopsLoader;


    block TrainstopsExtractor oftype HttpExtractor {
        url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV";
    }

    block TrainstopsTextFileInterpreter oftype TextFileInterpreter { }

    block TrainstopsCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }
   
    block TrainstopsTableInterpreter oftype TableInterpreter { 
        header: true;
        columns: [
            "EVA_NR" oftype integer,
            "DS100" oftype text,
            "IFOPT" oftype text,
            "NAME" oftype text,
            "Verkehr" oftype text,
            "Laenge" oftype decimal, 
            "Breite" oftype decimal,
            "Betreiber_Name" oftype text,
            "Betreiber_Nr" oftype integer,
        ];        
    }


    block TrainstopsLoader oftype SQLiteLoader { 
        table: "trainstops";
        file: "./trainstops.sqlite";
    }



}

// Valid "Verkehr" values are "FV", "RV", "nur DPN"
valuetype VerkehrValidate oftype text {
    constraints: [ 
        VerkehrValue,
        MinLength,
    ];
}
constraint VerkehrValue oftype AllowlistConstraint {
    allowlist: ["FV", "RV", "nur DPN"];
}

// Valid "Laenge", "Breite" values are geographic coordinate system values between and including -90 and 90
valuetype LBValidate oftype decimal {
    constraints: [ LBValue ];
}
constraint LBValue oftype RangeConstraint {
    lowerBound: -90;
    lowerBoundInclusive: true;
    upperBound: 90;
    upperBoundInclusive: true;
}

// Valid "IFOPT" values follow this pattern: <exactly two characters>:<any amount of numbers>:<any amount of numbers><optionally another colon followed by any amount of numbers>
valuetype IFOTValidate oftype text {
    constraints: [ 
        IFOTValue,
        MinLength, 
    ];
}
constraint IFOTValue oftype RegexConstraint {
    regex: /^[a-z]{2}:\d+:\d+(\:\d+)?$/;
}

// Empty cells are considered invalid
valuetype MinValidate oftype text {
    constraints: [ 
        MinLength 
    ];
}
constraint MinLength oftype LengthConstraint {
    minLength: 1;
}



