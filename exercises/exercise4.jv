pipeline Temparature {

    FileExtractor
        -> ZipArchiveInterpreter
        -> DataFilePicker
        -> TextFileInterpreter
        -> CSVInterpreter
        -> Rename1HeaderWriter
        -> Rename2HeaderWriter
        -> CoreDataSelector
        -> ColumnDeleter
        -> TemparatureTableInterpreter
        -> CelsiusToFahrenheitTransformer1
        -> CelsiusToFahrenheitTransformer2
        -> TableLoader;


    block FileExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }
    
    block DataFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TextFileInterpreter oftype TextFileInterpreter { }

    block CSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block Rename1HeaderWriter oftype CellWriter {
        at: cell E1;
        write: ["Temperatur"];
    }
    block Rename2HeaderWriter oftype CellWriter {
        at: cell J1;
        write: ["Batterietemperatur"];
    }

    block CoreDataSelector oftype CellRangeSelector {
    select: range A1:K*;
    }

    block ColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }


    block TemparatureTableInterpreter oftype TableInterpreter { 
        header: true;
        columns: [
            "Geraet" oftype GValidate,
            "Hersteller" oftype text,
            "Model" oftype text,
            "Monat" oftype MValidate,
            "Temperatur" oftype decimal,
            "Batterietemperatur" oftype decimal, 
            "Geraet aktiv" oftype GAValidate,
        ];
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
    block CelsiusToFahrenheitTransformer1 oftype TableTransformer {
        inputColumns: ['Temperatur'];
        outputColumn: 'Temperatur';
        use: CelsiusToFahrenheit;
    }
    block CelsiusToFahrenheitTransformer2 oftype TableTransformer {
        inputColumns: ['Batterietemperatur']; 
        outputColumn: 'Batterietemperatur';
        use: CelsiusToFahrenheit;
    }

    block TableLoader oftype SQLiteLoader { 
        table: "temperatures";
        file: "./temperatures.sqlite";
    }


}

// validate values

valuetype GValidate oftype integer {
    constraints: [ 
        GValue,
    ];
}
constraint GValue oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
}

valuetype MValidate oftype integer {
    constraints: [ 
        MValue
    ];
}
constraint MValue oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
    upperBound: 12;
    upperBoundInclusive: true;
}

valuetype GAValidate oftype text {
    constraints: [ 
        GAValue
    ];
}
constraint GAValue oftype AllowlistConstraint {
    allowlist: ["Ja", "Nein"];
}
